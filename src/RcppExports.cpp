// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lll_gradC
arma::vec lll_gradC(const arma::mat& design, const arma::vec& coef, const arma::vec& y, const arma::mat& pen_matrix, const double& lambda);
RcppExport SEXP _CompStat_lll_gradC(SEXP designSEXP, SEXP coefSEXP, SEXP ySEXP, SEXP pen_matrixSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pen_matrix(pen_matrixSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lll_gradC(design, coef, y, pen_matrix, lambda));
    return rcpp_result_gen;
END_RCPP
}
// SGD_CPP_PRIMITIVE
Rcpp::List SGD_CPP_PRIMITIVE(const arma::mat& design, arma::vec coef, const arma::vec& y, const arma::mat& pen_matrix, const double& lambda, const NumericVector& lr, const int& maxiter, int& batch_size, const double& adam_beta1, const double& adam_beta2, const double& adam_eps, const bool& amsgrad, const int& seed, const double& objtarget);
RcppExport SEXP _CompStat_SGD_CPP_PRIMITIVE(SEXP designSEXP, SEXP coefSEXP, SEXP ySEXP, SEXP pen_matrixSEXP, SEXP lambdaSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP batch_sizeSEXP, SEXP adam_beta1SEXP, SEXP adam_beta2SEXP, SEXP adam_epsSEXP, SEXP amsgradSEXP, SEXP seedSEXP, SEXP objtargetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pen_matrix(pen_matrixSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int& >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type adam_beta1(adam_beta1SEXP);
    Rcpp::traits::input_parameter< const double& >::type adam_beta2(adam_beta2SEXP);
    Rcpp::traits::input_parameter< const double& >::type adam_eps(adam_epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type amsgrad(amsgradSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const double& >::type objtarget(objtargetSEXP);
    rcpp_result_gen = Rcpp::wrap(SGD_CPP_PRIMITIVE(design, coef, y, pen_matrix, lambda, lr, maxiter, batch_size, adam_beta1, adam_beta2, adam_eps, amsgrad, seed, objtarget));
    return rcpp_result_gen;
END_RCPP
}
// epanechnikov_l2norm_runningC
double epanechnikov_l2norm_runningC(NumericVector x, double r);
RcppExport SEXP _CompStat_epanechnikov_l2norm_runningC(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(epanechnikov_l2norm_runningC(x, r));
    return rcpp_result_gen;
END_RCPP
}
// eval_kdensC
NumericVector eval_kdensC(String kcode, NumericVector grid, NumericVector x, double bw);
RcppExport SEXP _CompStat_eval_kdensC(SEXP kcodeSEXP, SEXP gridSEXP, SEXP xSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type kcode(kcodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_kdensC(kcode, grid, x, bw));
    return rcpp_result_gen;
END_RCPP
}
// vmC
NumericMatrix vmC(NumericVector y, int n);
RcppExport SEXP _CompStat_vmC(SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vmC(y, n));
    return rcpp_result_gen;
END_RCPP
}
// vmC2
NumericMatrix vmC2(NumericVector y, int n);
RcppExport SEXP _CompStat_vmC2(SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vmC2(y, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CompStat_lll_gradC", (DL_FUNC) &_CompStat_lll_gradC, 5},
    {"_CompStat_SGD_CPP_PRIMITIVE", (DL_FUNC) &_CompStat_SGD_CPP_PRIMITIVE, 14},
    {"_CompStat_epanechnikov_l2norm_runningC", (DL_FUNC) &_CompStat_epanechnikov_l2norm_runningC, 2},
    {"_CompStat_eval_kdensC", (DL_FUNC) &_CompStat_eval_kdensC, 4},
    {"_CompStat_vmC", (DL_FUNC) &_CompStat_vmC, 2},
    {"_CompStat_vmC2", (DL_FUNC) &_CompStat_vmC2, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CompStat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
