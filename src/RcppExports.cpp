// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// batch_gradient
arma::vec batch_gradient(arma::mat design, arma::vec coef, arma::vec y);
RcppExport SEXP _CompStat_batch_gradient(SEXP designSEXP, SEXP coefSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type design(designSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(batch_gradient(design, coef, y));
    return rcpp_result_gen;
END_RCPP
}
// SGD_CPP
Rcpp::List SGD_CPP(arma::mat design, arma::vec coef, arma::vec y, NumericVector lr, int maxiter, int batch_size, double adam_beta1, double adam_beta2, double adam_eps);
RcppExport SEXP _CompStat_SGD_CPP(SEXP designSEXP, SEXP coefSEXP, SEXP ySEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP batch_sizeSEXP, SEXP adam_beta1SEXP, SEXP adam_beta2SEXP, SEXP adam_epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type design(designSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type adam_beta1(adam_beta1SEXP);
    Rcpp::traits::input_parameter< double >::type adam_beta2(adam_beta2SEXP);
    Rcpp::traits::input_parameter< double >::type adam_eps(adam_epsSEXP);
    rcpp_result_gen = Rcpp::wrap(SGD_CPP(design, coef, y, lr, maxiter, batch_size, adam_beta1, adam_beta2, adam_eps));
    return rcpp_result_gen;
END_RCPP
}
// epanechnikov_l2norm_runningC
double epanechnikov_l2norm_runningC(NumericVector x, double r);
RcppExport SEXP _CompStat_epanechnikov_l2norm_runningC(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(epanechnikov_l2norm_runningC(x, r));
    return rcpp_result_gen;
END_RCPP
}
// eval_kdensC
NumericVector eval_kdensC(String kcode, NumericVector grid, NumericVector x, double bw);
RcppExport SEXP _CompStat_eval_kdensC(SEXP kcodeSEXP, SEXP gridSEXP, SEXP xSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type kcode(kcodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_kdensC(kcode, grid, x, bw));
    return rcpp_result_gen;
END_RCPP
}
// vmC
NumericMatrix vmC(NumericVector y, int n);
RcppExport SEXP _CompStat_vmC(SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vmC(y, n));
    return rcpp_result_gen;
END_RCPP
}
// vmC2
NumericMatrix vmC2(NumericVector y, int n);
RcppExport SEXP _CompStat_vmC2(SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vmC2(y, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CompStat_batch_gradient", (DL_FUNC) &_CompStat_batch_gradient, 3},
    {"_CompStat_SGD_CPP", (DL_FUNC) &_CompStat_SGD_CPP, 9},
    {"_CompStat_epanechnikov_l2norm_runningC", (DL_FUNC) &_CompStat_epanechnikov_l2norm_runningC, 2},
    {"_CompStat_eval_kdensC", (DL_FUNC) &_CompStat_eval_kdensC, 4},
    {"_CompStat_vmC", (DL_FUNC) &_CompStat_vmC, 2},
    {"_CompStat_vmC2", (DL_FUNC) &_CompStat_vmC2, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CompStat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
